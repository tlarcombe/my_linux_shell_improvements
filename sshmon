#!/bin/bash

# SSH Login Monitor & Fail2ban Manager
# Monitors failed SSH attempts and manages fail2ban jail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
LOG_FILE="/var/log/auth.log"
FAIL2BAN_JAIL="sshd"
FAIL2BAN_JAIL2="sshd-forbidden-usernames"
LINES_TO_SHOW=20

show_help() {
    echo "SSH Login Monitor & Fail2ban Manager"
    echo
    echo "Usage: $0 [OPTION]"
    echo
    echo "Options:"
    echo "  -f, --failed        Show recent failed login attempts"
    echo "  -u, --users         Show failed login attempts by username"
    echo "  -i, --ips           Show failed login attempts by IP address"
    echo "  -s, --status        Show fail2ban jail status"
    echo "  -b, --banned        Show currently banned IPs"
    echo "  -a, --add IP        Manually ban an IP address"
    echo "  -r, --remove IP     Manually unban an IP address"
    echo "  -w, --whitelist IP  Add IP to fail2ban whitelist"
    echo "  -l, --logs [N]      Show last N lines of auth log (default: 20)"
    echo "  -h, --help          Show this help message"
    echo
}

show_failed_attempts() {
    echo -e "${YELLOW}Recent Failed SSH Login Attempts:${NC}"
    echo "============================================"
    if [[ ! -r "$LOG_FILE" ]]; then
        echo -e "${RED}Error: Cannot read $LOG_FILE${NC}"
        echo -e "${BLUE}Try running with sudo: sudo sshmon -f${NC}"
        return 1
    fi
    
    grep "Failed password\|Invalid user" "$LOG_FILE" | tail -n "$LINES_TO_SHOW" | while read -r line; do
        timestamp=$(echo "$line" | awk '{print $1}')
        ip=$(echo "$line" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
        
        if echo "$line" | grep -q "Invalid user"; then
            user=$(echo "$line" | sed -n 's/.*Invalid user \([^ ]*\) from.*/\1/p')
            echo -e "${RED}[$timestamp] Invalid user: $user from $ip${NC}"
        else
            user=$(echo "$line" | sed -n 's/.*Failed password for \([^ ]*\) from.*/\1/p')
            echo -e "${YELLOW}[$timestamp] Failed password: $user from $ip${NC}"
        fi
    done
}

show_users_summary() {
    echo -e "${YELLOW}Failed Login Attempts by Username:${NC}"
    echo "=================================="
    if [[ ! -r "$LOG_FILE" ]]; then
        echo -e "${RED}Error: Cannot read $LOG_FILE${NC}"
        echo -e "${BLUE}Try running with sudo: sudo sshmon -u${NC}"
        return 1
    fi
    
    grep "Failed password\|Invalid user" "$LOG_FILE" | \
    sed -n 's/.*Invalid user \([^ ]*\) from.*/\1/p; s/.*Failed password for \([^ ]*\) from.*/\1/p' | \
    sort | uniq -c | sort -nr | head -20 | \
    while read -r count user; do
        echo -e "${RED}$count${NC} attempts for user: ${BLUE}$user${NC}"
    done
}

show_ips_summary() {
    echo -e "${YELLOW}Failed Login Attempts by IP Address:${NC}"
    echo "==================================="
    if [[ ! -r "$LOG_FILE" ]]; then
        echo -e "${RED}Error: Cannot read $LOG_FILE${NC}"
        echo -e "${BLUE}Try running with sudo: sudo sshmon -i${NC}"
        return 1
    fi
    
    grep "Failed password\|Invalid user" "$LOG_FILE" | \
    grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | \
    sort | uniq -c | sort -nr | head -20 | \
    while read -r count ip; do
        echo -e "${RED}$count${NC} attempts from IP: ${BLUE}$ip${NC}"
    done
}

show_fail2ban_status() {
    echo -e "${YELLOW}Fail2ban Jail Status:${NC}"
    echo "===================="
    if command -v fail2ban-client &> /dev/null; then
        echo -e "${BLUE}SSHD Jail:${NC}"
        fail2ban-client status "$FAIL2BAN_JAIL"
        echo
        echo -e "${BLUE}SSHD Forbidden Usernames Jail:${NC}"
        fail2ban-client status "$FAIL2BAN_JAIL2"
    else
        echo -e "${RED}Error: fail2ban-client not found${NC}"
    fi
}

show_banned_ips() {
    echo -e "${YELLOW}Currently Banned IPs:${NC}"
    echo "===================="
    if command -v fail2ban-client &> /dev/null; then
        echo -e "${BLUE}SSHD Jail:${NC}"
        banned_ips=$(fail2ban-client get "$FAIL2BAN_JAIL" banip 2>/dev/null || echo "")
        if [ -n "$banned_ips" ]; then
            echo "$banned_ips"
        else
            echo "No IPs currently banned"
        fi
        
        echo
        echo -e "${BLUE}SSHD Forbidden Usernames Jail:${NC}"
        banned_ips2=$(fail2ban-client get "$FAIL2BAN_JAIL2" banip 2>/dev/null || echo "")
        if [ -n "$banned_ips2" ]; then
            echo "$banned_ips2"
        else
            echo "No IPs currently banned"
        fi
    else
        echo -e "${RED}Error: fail2ban-client not found${NC}"
    fi
}

ban_ip() {
    local ip="$1"
    if [[ ! "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        echo -e "${RED}Error: Invalid IP address format${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}Banning IP: $ip${NC}"
    if fail2ban-client set "$FAIL2BAN_JAIL" banip "$ip"; then
        echo -e "${GREEN}Successfully banned $ip${NC}"
    else
        echo -e "${RED}Failed to ban $ip${NC}"
    fi
}

unban_ip() {
    local ip="$1"
    if [[ ! "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        echo -e "${RED}Error: Invalid IP address format${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}Unbanning IP: $ip${NC}"
    if fail2ban-client set "$FAIL2BAN_JAIL" unbanip "$ip"; then
        echo -e "${GREEN}Successfully unbanned $ip${NC}"
    else
        echo -e "${RED}Failed to unban $ip (may not be banned)${NC}"
    fi
}

whitelist_ip() {
    local ip="$1"
    if [[ ! "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        echo -e "${RED}Error: Invalid IP address format${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}Adding $ip to whitelist${NC}"
    echo -e "${BLUE}Note: You need to add '$ip' to the 'ignoreip' setting in your fail2ban jail configuration${NC}"
    echo -e "${BLUE}File location: /etc/fail2ban/jail.local or /etc/fail2ban/jail.conf${NC}"
    echo -e "${BLUE}Then restart fail2ban: sudo systemctl restart fail2ban${NC}"
}

show_logs() {
    local num_lines="${1:-$LINES_TO_SHOW}"
    echo -e "${YELLOW}Last $num_lines lines of auth log:${NC}"
    echo "==============================="
    if [[ ! -r "$LOG_FILE" ]]; then
        echo -e "${RED}Error: Cannot read $LOG_FILE${NC}"
        echo -e "${BLUE}Try running with sudo: sudo sshmon -l${NC}"
        return 1
    fi
    tail -n "$num_lines" "$LOG_FILE" | grep -E "(ssh|SSH)" --color=auto
}

# Check if running as root for fail2ban operations
check_root() {
    if [[ $EUID -ne 0 ]] && [[ "$1" =~ ^(-a|--add|-r|--remove|-s|--status|-b|--banned)$ ]]; then
        echo -e "${RED}Error: This operation requires root privileges${NC}"
        echo "Please run with sudo"
        exit 1
    fi
}

# Check if we need sudo for log operations
check_log_access() {
    if [[ ! -r "$LOG_FILE" ]] && [[ "$1" =~ ^(-f|--failed|-u|--users|-i|--ips|-l|--logs|"")$ ]]; then
        echo -e "${RED}Error: Cannot read $LOG_FILE${NC}"
        echo -e "${BLUE}Try running with sudo for log operations${NC}"
        exit 1
    fi
}

# Check if log file exists
if [[ ! -f "$LOG_FILE" ]]; then
    echo -e "${RED}Error: Log file $LOG_FILE not found${NC}"
    exit 1
fi

# Parse command line arguments
case "$1" in
    -f|--failed)
        show_failed_attempts
        ;;
    -u|--users)
        show_users_summary
        ;;
    -i|--ips)
        show_ips_summary
        ;;
    -s|--status)
        check_root "$1"
        show_fail2ban_status
        ;;
    -b|--banned)
        check_root "$1"
        show_banned_ips
        ;;
    -a|--add)
        check_root "$1"
        if [[ -z "$2" ]]; then
            echo -e "${RED}Error: Please provide an IP address to ban${NC}"
            exit 1
        fi
        ban_ip "$2"
        ;;
    -r|--remove)
        check_root "$1"
        if [[ -z "$2" ]]; then
            echo -e "${RED}Error: Please provide an IP address to unban${NC}"
            exit 1
        fi
        unban_ip "$2"
        ;;
    -w|--whitelist)
        if [[ -z "$2" ]]; then
            echo -e "${RED}Error: Please provide an IP address to whitelist${NC}"
            exit 1
        fi
        whitelist_ip "$2"
        ;;
    -l|--logs)
        show_logs "$2"
        ;;
    -h|--help)
        show_help
        ;;
    "")
        echo -e "${BLUE}SSH Login Monitor & Fail2ban Manager${NC}"
        echo "Use -h or --help for options"
        echo
        show_failed_attempts
        ;;
    *)
        echo -e "${RED}Error: Unknown option $1${NC}"
        echo "Use -h or --help for available options"
        exit 1
        ;;
esac
